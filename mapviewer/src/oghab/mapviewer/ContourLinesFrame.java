/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package oghab.mapviewer;

import gov.nasa.worldwind.awt.WorldWindowGLCanvas;
import gov.nasa.worldwind.geom.LatLon;
import gov.nasa.worldwind.layers.RenderableLayer;
import gov.nasa.worldwind.render.ContourLine;
import gov.nasa.worldwind.render.ContourLinePolygon;
import java.awt.Color;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.ResourceBundle;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JSlider;
import javax.swing.border.TitledBorder;
import javax.swing.event.ChangeEvent;
import static oghab.mapviewer.MainFrame.CURR_LANG;

/**
 *
 * @author AZUS
 */
public class ContourLinesFrame extends javax.swing.JFrame {
    protected ContourLine contourLine = null;
    WorldWindowGLCanvas wwd = null;
    static public ContourLinesFrame frame = null;
    public RenderableLayer layer = null;

    ResourceBundle bundle = null;
    public void set_language(String lang)
    {
        bundle = MainFrame.getLanguageBundle(this, lang);
        MainFrame.bUpdateEdit = false;

        this.setTitle(bundle.getString("F_ContourLines"));
        ((TitledBorder)P_ContourLines.getBorder()).setTitle(bundle.getString("P_Contour_Line_Elevation"));

        MainFrame.bUpdateEdit = true;
    }

    /**
     * Creates new form ContourLinesFrame
     * @param wwd
     */
    public ContourLinesFrame(WorldWindowGLCanvas wwd) {
        frame = this;
        initComponents();
        this.set_language(CURR_LANG);

        ImageIcon icon = new ImageIcon(getClass().getResource("/res/mapviewer_icon.png"));  
        this.setIconImage(icon.getImage());  
        
        this.wwd = wwd;
        
        if(wwd != null)
        {
            // Create a layer to display the contour lines.
            layer = new RenderableLayer();
            layer.setName(bundle.getString("F_ContourLines"));
            layer.setPickEnabled(false);

            // Add the contour line layer to the WorldWindow and update the layer panel.
    //        insertBeforePlacenames(wwd, layer);
            wwd.getModel().getLayers().add(layer);

            // Add a global moving contour line to the layer.
            this.contourLine = new ContourLine();
            this.contourLine.setElevation(0);
            layer.addRenderable(this.contourLine);

            // Add a local contour line to the layer.
//            ArrayList<LatLon> positions = new ArrayList<>();
//            positions.add(LatLon.fromDegrees(44.16, 6.82));
//            positions.add(LatLon.fromDegrees(44.16, 7.09));
//            positions.add(LatLon.fromDegrees(44.30, 6.95));
//            positions.add(LatLon.fromDegrees(44.16, 6.82));
//
//            for (int elevation = 0; elevation <= 3000; elevation += 250) {
//                ContourLinePolygon cl = new ContourLinePolygon(elevation, positions);
//                cl.setColor(new Color(0.2f, 0.2f, 0.8f));
//
//                if (elevation % 1000 == 0) {
//                    cl.setColor(new Color(0.0f, 0.1f, 0.6f));
//                }
//
//                if (elevation % 500 == 0) {
//                    cl.setLineWidth(2);
//                }
//
//                layer.addRenderable(cl);
//            }
        }
        
        S_Elevations.setMinimum(0);
        S_Elevations.setMaximum(3000);
        if(contourLine != null)
            S_Elevations.setValue((int) contourLine.getElevation());
        else
            S_Elevations.setValue(0);
        S_Elevations.setMajorTickSpacing(1000);
        S_Elevations.setMinorTickSpacing(250);
        S_Elevations.setPaintTicks(true);
        S_Elevations.setPaintLabels(true);
        S_Elevations.addChangeListener((ChangeEvent event) -> {
            L_Elevation.setText(String.valueOf(S_Elevations.getValue()));
            if(contourLine != null)
            {
                contourLine.setElevation(S_Elevations.getValue());
                layer.setName(bundle.getString("F_ContourLines")+" "+S_Elevations.getValue());
                wwd.redraw();
            }
        });

        Hashtable<Integer, JLabel> labels = new Hashtable<>();
        labels.put(0   , new JLabel("0 "+bundle.getString("L_KM")));
        labels.put(1000, new JLabel("1 "+bundle.getString("L_KM")));
        labels.put(2000, new JLabel("2 "+bundle.getString("L_KM")));
        labels.put(3000, new JLabel("3 "+bundle.getString("L_KM")));
        S_Elevations.setLabelTable(labels);
        
        this.pack();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        P_ContourLines = new javax.swing.JPanel();
        S_Elevations = new javax.swing.JSlider();
        L_Elevation = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        P_ContourLines.setBorder(javax.swing.BorderFactory.createTitledBorder("Contour Lines"));

        L_Elevation.setText("0");
        L_Elevation.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout P_ContourLinesLayout = new javax.swing.GroupLayout(P_ContourLines);
        P_ContourLines.setLayout(P_ContourLinesLayout);
        P_ContourLinesLayout.setHorizontalGroup(
            P_ContourLinesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(P_ContourLinesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(S_Elevations, javax.swing.GroupLayout.DEFAULT_SIZE, 481, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(L_Elevation, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        P_ContourLinesLayout.setVerticalGroup(
            P_ContourLinesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(P_ContourLinesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(P_ContourLinesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(L_Elevation)
                    .addComponent(S_Elevations, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(P_ContourLines, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(P_ContourLines, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ContourLinesFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ContourLinesFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ContourLinesFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ContourLinesFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ContourLinesFrame(null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JLabel L_Elevation;
    public javax.swing.JPanel P_ContourLines;
    public javax.swing.JSlider S_Elevations;
    // End of variables declaration//GEN-END:variables
}
